<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[关于springMVC文件上传]]></title>
      <url>/2019/08/10/%E5%85%B3%E4%BA%8EspringMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      <content type="html"><![CDATA[<p>最近开发springboot的项目时遇到了一个问题，就是web页面上传文件到服务器总是上传不了，我查了一些资料，终于解决了，总结一下。</p>
<p>##<br>上传文件的时候报错，我调试了一下，发现在这一步时有问题<br>MultipartHttpServletRequest mRequest = (MultipartHttpServletRequest) request;<br>类型转换时报错。这说明是页面传数据的方式有问题。<br>传文件的时候如果用form表单的形式传，别忘了加enctype=”multipart/form-data”<br>像这样：</p>
<pre><code>&lt;form action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot;&gt;

&lt;input type=&quot;file&quot; name=&quot;testFile&quot;/&gt;

&lt;input type=&quot;submit&quot; value=&quot;upload&quot;/&gt;

&lt;/form&gt;</code></pre><h3 id="其他要注意的地方"><a href="#其他要注意的地方" class="headerlink" title="其他要注意的地方"></a>其他要注意的地方</h3><p>一定要在springmvc配置文件里配置文件上传</p>
<pre><code>&lt;bean id=&quot;multipartResolver&quot;  
    class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;  
    &lt;!-- 设置上传文件的最大尺寸为1MB --&gt;  
    &lt;property name=&quot;maxUploadSize&quot;&gt;  
        &lt;value&gt;1048576&lt;/value&gt;  
    &lt;/property&gt;  
&lt;/bean&gt; </code></pre><p>在springboot中可以通过实现WebMvcConfigurer接口，来配置</p>
<pre><code>@Bean
public MultipartResolver multipartResolver() {
    CommonsMultipartResolver resolver = new CommonsMultipartResolver();
    resolver.setDefaultEncoding(&quot;UTF-8&quot;);
    resolver.setResolveLazily(true); //resolveLazily属性启用是为了推迟文件解析，以在在UploadAction中捕获文件大小异常
    resolver.setMaxInMemorySize(40960); //设定文件上传时写入内存的最大值，如果小于这个参数不会生成临时文件，默认为10240
    resolver.setMaxUploadSize(10 * 1024 * 1024); // 上传文件大小 10M 10*1024*1024
    return resolver;
}</code></pre>]]></content>
      
        <categories>
            
            <category> 开发中遇到的问题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用java做一个游戏挂机脚本（类似于按键精灵之类的）]]></title>
      <url>/2019/08/04/%E4%BD%BF%E7%94%A8java%E5%81%9A%E4%B8%80%E4%B8%AA%E6%B8%B8%E6%88%8F%E6%8C%82%E6%9C%BA%E8%84%9A%E6%9C%AC%EF%BC%88%E7%B1%BB%E4%BC%BC%E4%BA%8E%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5%E4%B9%8B%E7%B1%BB%E7%9A%84%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近突然有个想法能不能用java做一个游戏外挂，就是控制键盘鼠标的那种，虽然现在已经有按键精灵之类的软件，但是使用这些软件有时候容易被封号，使用java就比较安全了，java是运行在JVM中的，也不容易被游戏检测到。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>其实这个是一个入门级的，很简单，当然你要有一点java基础<br>我们先要用到这个包java.awt.Robot;<br>new一个Robot<br>Robot robot = new Robot();<br>然后就可以使用robot进行自动化操作啦</p>
<h3 id="模拟按键"><a href="#模拟按键" class="headerlink" title="模拟按键"></a>模拟按键</h3><p>按下按键：robot.keyPress()；<br>弹起按键：robot.keyRelease();</p>
<pre><code>这里要注意的是：
括号里需要填入那个按键对应的ASCII码 int类型，记不住ASCII码没关系，可以使用java里自带的KeyEvent
如，要按下“A”键，就这样写：robot.keyPress(KeyEvent.VK_A);
按空格：robot.keyPress(KeyEvent.VK_BACK_SPACE);</code></pre><h3 id="模拟鼠标"><a href="#模拟鼠标" class="headerlink" title="模拟鼠标"></a>模拟鼠标</h3><p>按下左键：robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);<br>按下中键：robot.mousePress(InputEvent.BUTTON2_DOWN_MASK);<br>按下右键：robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);</p>
<p>抬起使用：robot.mouseRelease(同上);</p>
<p>移动鼠标：robot.mouseMove(int x, int y);<br>x,y 对应的是电脑屏幕上的横纵坐标，显示器左上角是0,0</p>
<h3 id="还可以获得屏幕颜色"><a href="#还可以获得屏幕颜色" class="headerlink" title="还可以获得屏幕颜色"></a>还可以获得屏幕颜色</h3><p>获得屏幕指定像素的颜色使用：<br>robot.getPixelColor(int x, int y)<br>x,y同样是屏幕坐标<br>我们可以new一个color对象，来保存这个颜色<br>Color color = robot.getPixelColor(0, 0);</p>
<p>这个功能很好用，在游戏中可以根据某个位置的颜色来判断是否要做哪些操作。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>最后要注意一下，当你需要循环点击某个按键的时候，最好使用delay延时一下。<br>robot.delay(ms);<br>括号里面是时间单位是毫秒，而且为了模拟的更像人，时间间隔最好使用随机数。<br>比如 Random的nextInt(100); 就可以生成一个0-100之间的随机整数</p>
]]></content>
      
        <categories>
            
            <category> 兴趣使然 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 游戏外挂 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用hexo搭建博客，并且部署到github]]></title>
      <url>/2019/07/28/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%8C%E5%B9%B6%E4%B8%94%E9%83%A8%E7%BD%B2%E5%88%B0github/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近突然想搭建一个自己的技术博客，想了想觉得可以使用hexo搭建一个静态的博客，部署在github上，再弄个域名，不用去买服务器，也不用后台。费了一番功夫，也算是弄好了。然后顺便把这个过程记录下来，这也就是我的第一篇文章。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1.安装git （这个我就不细说了）<br>2.安装nodejs<br>3.安装hexo<br>4.搭建博客<br>5.写一篇文章<br>6.部署到github（你需要有一个github账号）</p>
<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>去官网下载最新版本，安装</p>
<p>安装好之后可以验证一下：</p>
<pre><code>node -v</code></pre><p>然后安装cnpm（可以不使用cnpm）：</p>
<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>使用命令：</p>
<pre><code>cnpm install -g hexo-cli</code></pre><p>如果没有安装cnpm，就用npm：</p>
<pre><code>npm install -g hexo-cli</code></pre><p>安装完之后可以验证一下：</p>
<pre><code>hexo -v</code></pre><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p>直接在某个位置新建一个文件夹，名字随意，比如blog</p>
<p>也可以在命令行窗口使用 mkdir blog 新建一个文件夹</p>
<p>然后进到那个文件夹目录：</p>
<pre><code>cd blog</code></pre><p>再使用hexo生成一个博客：</p>
<pre><code>hexo init</code></pre><p>这样就成功在本地搭建了一个博客，可以启动看看：</p>
<pre><code>hexo s</code></pre><p>ctrl+c可以停止</p>
<p>这样就启动好了<br><img src="001.jpg" alt><br>打开<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p>
<h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><p>在blog目录下</p>
<pre><code>hexo new &quot;我的文章&quot;</code></pre><p>这样就在 blog/source/_posts 底下新建了一篇文章，你可以自己在里面写内容。<br>这个是基于markdown格式的,你可以去看看markdown语法。</p>
<p>然后重新生成一下(在blog的根目录)</p>
<pre><code>hexo clean
hexo g</code></pre><p>刷新一下网页就可以看到你的文章了</p>
<p>最后我们可以把它部署到github上</p>
<h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><p> 先登录到你的github账号<br> 再新建一个仓库</p>
<pre><code>仓库名字要是 你的github昵称.github.io
如 umrm.github.io
描述可以随便写一个   
最后再create，就完成了。</code></pre><p>现在你有了一个空仓库</p>
<h4 id="你需要安装一个Git的插件"><a href="#你需要安装一个Git的插件" class="headerlink" title="你需要安装一个Git的插件"></a>你需要安装一个Git的插件</h4><pre><code>cnpm install --save hexo-deployer-git</code></pre><h4 id="再设置一下"><a href="#再设置一下" class="headerlink" title="再设置一下"></a>再设置一下</h4><p>在blog目录下打开配置文件_config.yml<br>找到deploy<br>把repo改成你刚建的那个仓库，别忘了冒号后有空格</p>
<pre><code>deploy:
  type: git
  repo: https://github.com/umrm/umrm.github.io.git
  branch: master</code></pre><h4 id="可以部署了"><a href="#可以部署了" class="headerlink" title="可以部署了"></a>可以部署了</h4><p>使用hexo d命令来部署到github上</p>
<pre><code>hexo d</code></pre><p>第一次会需要你输入github的账号和密码登录一下</p>
<h4 id="成功之后就可以在浏览器上可以直接通过你的仓库名进行访问"><a href="#成功之后就可以在浏览器上可以直接通过你的仓库名进行访问" class="headerlink" title="成功之后就可以在浏览器上可以直接通过你的仓库名进行访问"></a>成功之后就可以在浏览器上可以直接通过你的仓库名进行访问</h4><p>hexo有一个默认的主题，你还可以在网上去下载别的主题</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
